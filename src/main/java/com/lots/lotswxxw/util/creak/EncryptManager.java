package com.lots.lotswxxw.util.creak;

import java.io.UnsupportedEncodingException;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.util.Arrays;
import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import org.json.JSONObject;

/**
 * @author lots
 */
public class EncryptManager {
    private static final String TAG = "EncryptManager";
    private static volatile EncryptManager instance;
    private String appKey = "scb37537f85scxpcm59f7e318b9epa51";
    private Cipher cipher;
    private String encryptKey;
    private boolean isDebug = false;
    private byte[][] key_iv;
    private SecretKeySpec skeySpec;
    private static String p1 = "7205a6c3883caf95b52db5b534e12ec3";
    private static String p2 = "81d7beac44a86f4337f534ec93328370";
    /*public static String key = "f5675cbb7e8887a705a4e6c94823d842bdea9abd51c84498c6484bc9592f41ff";
    public static String iv = "f4e540360b85e9cd70330f50955ef83f";*/
    public EncryptManager() {
        try {
            this.cipher = Cipher.getInstance("AES/CFB/NoPadding");
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
            this.cipher = null;
        } catch (NoSuchPaddingException e2) {
            e2.printStackTrace();
            this.cipher = null;
        }
    }

    public static EncryptManager getInstance() {
        if (instance == null) {
            synchronized (EncryptManager.class) {
                if (instance == null) {
                    instance = new EncryptManager();
                    instance.init(p1, p2);
                }
            }
        }
        return instance;
    }

    public void init(String str, String str2) {
        this.encryptKey = str;
        this.appKey = str2;
        try {
            this.key_iv = AesCfbUtil.EVP_BytesToKey(32, 16, (byte[]) null, str.getBytes("UTF-8"), 0);
            this.skeySpec = new SecretKeySpec(this.key_iv[0], "AES");
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
            this.skeySpec = null;
        } catch (Exception e2) {
            e2.printStackTrace();
            this.skeySpec = null;
        }
    }

    public String encrypt(String str) {
        logInfo(str);
        if (StringUtil.isEmpty(str) || this.cipher == null || this.skeySpec == null) {
            return null;
        }
        try {
            this.cipher.init(1, this.skeySpec);
            try {
                return AesCfbUtil.byte2hex(AesCfbUtil.byteMerger(this.cipher.getIV(), this.cipher.doFinal(str.getBytes("UTF-8"))));
            } catch (BadPaddingException e) {
                e.printStackTrace();
                return null;
            } catch (IllegalBlockSizeException e2) {
                e2.printStackTrace();
                return null;
            } catch (UnsupportedEncodingException e3) {
                e3.printStackTrace();
                return null;
            }
        } catch (InvalidKeyException e4) {
            e4.printStackTrace();
            return null;
        }
    }

    public String decrypt(String str) {
        logInfo(str);
        if (StringUtil.isEmpty(str) || this.cipher == null || this.skeySpec == null) {
            return null;
        }
        byte[] hex2byte = AesCfbUtil.hex2byte(str);
        byte[] copyOfRange = Arrays.copyOfRange(hex2byte, 0, 16);
        byte[] copyOfRange2 = Arrays.copyOfRange(hex2byte, 16, hex2byte.length);
        try {
            this.cipher.init(2, this.skeySpec, new IvParameterSpec(copyOfRange));
            String str2 = new String(this.cipher.doFinal(copyOfRange2), "UTF-8");
            logInfo(str2);
            return str2;
        } catch (InvalidAlgorithmParameterException e) {
            e.printStackTrace();
            return null;
        } catch (InvalidKeyException e2) {
            e2.printStackTrace();
            return null;
        } catch (BadPaddingException e3) {
            e3.printStackTrace();
            return null;
        } catch (UnsupportedEncodingException e4) {
            e4.printStackTrace();
            return null;
        } catch (IllegalBlockSizeException e5) {
            e5.printStackTrace();
            return null;
        }
    }

    public String getRequestJson(String str){
        JSONObject jSONObject = new JSONObject();
        String secondTime = TimeUtil.getSecondTime();
        String encrypt = encrypt(str);
        String md5 = getMd5(AesCfbUtil.getSHA256StrJava("data=" + encrypt + "&timestamp=" + secondTime + this.appKey));
        jSONObject.put("timestamp", secondTime);
        jSONObject.put("data", encrypt);
        jSONObject.put("sign", md5);
        return jSONObject.toString();
    }

    public String getReusltJson(String str) {
        JSONObject jSONObject = new JSONObject(str);
        if (jSONObject == null) {
            return null;
        }
        String optString = jSONObject.optString("data");
        if (StringUtil.isEmpty(optString)) {
            return null;
        }
        return decrypt(optString);
    }

    private String getMd5(String str) {
        if (StringUtil.isEmpty(str)) {
            return null;
        }
        logInfo(str);
        return MD5Util.getMD5(str);
    }

    public boolean isCanEncrypt() {
        return !StringUtil.isEmpty(this.encryptKey) && !StringUtil.isEmpty(this.appKey);
    }

    private void logInfo(String str) {
//        PrintStream printStream = System.out;
//        printStream.print(TAG + " log=" + str);
    }

    public static void main(String[] args) {

        EncryptManager em= new EncryptManager();

        String date = "BAFA4E92CA8502D3844AF211E52656610E01EBAFADACAC0C37B7388B9AEAB7A3650E605B96D48A24FF373A79FA2F5D15F02D78250575886503622FDEFC2DBD0F126F13ADC65ED3D7E84546BFB7E13F10D05EF988A1D4550A90F97374B02CA917111C176B5E1FEF6A561E6BB70D41A159A86DEDF59A4AA9E7D0CA8B7CCE9EEB85744CB23FB7F351DC0D4C748AAB9DF81DE938313728FA0AEB7BDA561D2AA21EEBC29FA83AA505BDD1A11EFF7ED3B087FAE85221D9F5D741186C49C133E815BC0AC2454D834D42E61E45FA8845981F298979D9902EEB664C930CB6B228A52215C194B70656209FC312DA65D7221DE21BF1AF8B75320629F28D231EB551D6F98D3311DA37D69ECDBC49A6870DDAE5D089C1949F961FCEBC1BB29930EE809EF5D3E9FA87B0B06D15BF1E49BEBF8929873DBAC48405ECEDF0259188A96B316C0CA6E59D9FDAB40732A80F93344D0ED481AC7CC51B1474F44261363EE53A6E2C2D806835673A275AD879DBCFEC4B3E535890E96224CE5691C90F6568F2ECB9063430A8C1762AB280D87CD97F5BD536C3480280B83C8633AA6538A160A1EDE0083139F8A58B8E9E4D1523090B655EC31E5AC6A74672090FF9969128EEF8358359EEA4D7122B809DDF764CDDF600EBF8F6A94BE43B5451271E0EA53476EB0104560712C09A2299B012912150784CD85A87CFB0AF18B3D0DA1F721BDA0212D8BD9C0F85974E65F1B33E9FDCA802FCF0DA177F447BFBF40B126F71B03087E03FA357B3352959217A71B4824CED111D4C1799A987C06DB9BD9A17203279A26AA1690705814FED1283E45F8D97";
        String date
        String data2 = "2480FEC992B5527C75CF484C1417651BCD50EF85B4B88B4FF3DDFA5BF37387EB95B0C3BA3297FAD74E0354EFEE4C958EF640A2636BF132C8FE59FE6218C5D9219858CC16D6088C6ACE30A0BEF2CA9DA273DDA24EF8B913B8C2912283F467EEA9230069D5CE9F8F8BD2652EDB14724042B6C83BF74A39F9B154FB54989649310BAC832EDA30671E49B1002A4E14945309CC1EC53736134FD386A87B8859142A5A84A0B3040EAF25973E37C868867F75103C28A5DB783F81D827F9BCFCFED6EA90FFAD25AB790B9F12BEC5C7D28ED11FE4D793A9B53A9714FEE37E4CAB76DEC74E31DDC9A003FB4BBA66E219F2D6ABA93E4EB17F20D5D4F4BCE97703539FD5664B175AB4D178E72541B5327BE03AC43904D663A27F6D1AF81837E82430E770CEA3FCE60C9F94C5A329BBAA75B175D626FE5B737567F88A365143597125DD9BF2ADF719F96F21B80C6C16A90F0A06C19F4BE12CE9FC602E89FB01E1042DB29D18AC9770ED8E521EA2D3737CDFFD97F2AC03BD5B3AC63C0C3B53B942354A96700694A8A71922270103E0858445502A4828F100DD9EECEEA254E070EF55EB11153626218DA8FCC7DD24DC718F2EB145ABC8A7FD84D0737F22A8605C88BD83A8D2F70B8902526C7E77B14DCD81E133AAF746CD6C2D65100591936BE3366F0C050DA47A925B75F317C361577827AC3541F0F35F4B0F8DCFF809B424C619260A9FA2D8B728037A339503F5D0FC3DD069EEA40D62E5C5F0B7D2E5D249C99823E272DB297768A669E512CDA2AA4BE4840BC78191F59C7F170940BEA696EA0549BA99A842F9BE4AEA260990DC35F1F0617B7EE470B298138575996DC286C320F43CF5A2E431F2002FFBDC9B28E8958C14B4117BDC2043261CB28732147DE535F99CCBA3CF40E91D991A62C9A831E10C5EC1E970091B3BF0BA6C0CA96070B59424054FFF1D48DA4E387E090A51538E606F1C4EED62539791D23E18133170F7ABF5A333E998D5E6B9BFB71AD178D835C03D04368CAC158AB53FB50BFA1CC9A82DBBD91252BDB860B27581B3F5B0939713165839A913382148B8ED207681EF7AF40E88EF5C0BB13A607C576890C96BB245A946F92F76E386AF5695321FF3B688E80B1CB5FC947381D5DEB0D03596CA39E6618DA179461BF1B135CAB21F1D087A2D832AFE35DE5ED0248B8F9826B8D7F4E7B8565C371E0BA0191253A16652B57DE19FD24B1E2770B9630E0F60916792C86A37DF8EBD5939C7379C3BC53331D212FD5C23EF00C172F97353D9FD12C6A0CF81F2003DA51905830097FB58D393CD2DF8BB562032E7677104B7A93616EA45F96CF3BC5636EE656B23FD20595C0D0699BC3A1FB15B546C370DBA669E02D7BFA28C77541E319391852CD82ABCE650DE16D664B7CBA125771342579B6C15D8F08A6EFCCC42B0B8E2551C47FA9E161CA6314FEC73E2979B659655EC00A357AA0506C96BEEA38541E05A7936745FA52F0D305373B154D9127C79BA31BC6D895F07DD2021844E4F5641A60908EF243F658C7E35458B0FC4628607CA4FF33D78";
        em.init(p1,p2);
        final String decrypt2 = em.decrypt(data2);
        System.out.println(decrypt2);
        final String decrypt1 = em.decrypt(date);
        System.out.println(decrypt1);

    }
}